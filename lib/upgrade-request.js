"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.__test__ = undefined;

exports.default = function (options) {
    let LOG = options.logger;
    let yarnpkg = new _yarnpkg2.default(options.workingdir, LOG);
    let git = new _git2.default(options.workingdir, LOG);
    return yarnpkg.install().then(() => yarnpkg.outdated()).then(out => findOutdatedDeps(LOG, out)).then(([diff, hex]) => git.fetch("origin").then(() => [diff, hex])).then(([diff, hex]) => git.branchList().then(names => [names, diff, hex])).then(([names, diff, hex]) => findExistingBranch(LOG, options, names, diff, hex)).then(([newBranch, diff]) => git.checkoutWith(newBranch).then(() => diff)).then(diff => collectModuleVersions(options).then(mv => [mv, diff])).then(([mv, diff]) => yarnpkg.upgrade().then(out => computeUpdatedDependencies(LOG, options, diff, mv, out))).then(diff => git.setup(options.username, options.useremail).then(() => diff)).then(diff => git.add("yarn.lock").then(() => diff)).then(diff => git.commit("update dependencies").then(() => diff)).then(diff => git.currentBranch().then(newBranch => [newBranch, diff])).then(([newBranch, diff]) => git.checkout("-").then(() => [newBranch, diff])).then(([newBranch, diff]) => git.currentBranch().then(baseBranch => [baseBranch, newBranch, diff])).then(([baseBranch, newBranch, diff]) => selectPushPromise(LOG, options, git, "origin", newBranch).then(() => [baseBranch, newBranch, diff])).then(([baseBranch, newBranch, diff]) => git.remoteurl("origin").then(remote => [new _github2.default(options, remote), baseBranch, newBranch, diff])).then(([github, baseBranch, newBranch, diff]) => github.pullRequest(baseBranch, newBranch, diff).then(report => [report, newBranch])).then(([report, newBranch]) => selectDeletePromise(LOG, options, git, newBranch, report));
};

var _sha = require("sha.js");

var _sha2 = _interopRequireDefault(_sha);

var _fs = require("mz/fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _yarnpkg = require("./yarnpkg");

var _yarnpkg2 = _interopRequireDefault(_yarnpkg);

var _git = require("./git");

var _git2 = _interopRequireDefault(_git);

var _github = require("./github");

var _github2 = _interopRequireDefault(_github);

var _readPackageJson = require("./promise/read-package-json");

var _readPackageJson2 = _interopRequireDefault(_readPackageJson);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findOutdatedDeps(LOG, out) {
    LOG("Find some outdated dependencies.");
    LOG(`difference table ${out}`);
    if (out) {
        let diff = JSON.parse(out).data.body;
        if (diff && diff.some(v => v[1] !== v[2])) {
            LOG("Found outdated dependencies.");
            let hex = new _sha2.default.sha1().update(out, "utf8").digest("hex");
            return [diff, hex];
        }
    }
    LOG("Did not find outdated dependencies.");
    return Promise.reject("dependencies are not up to date.");
}

function collectModuleVersions(options) {
    if (options.withShadows) {
        let modules = _path2.default.join(options.workingdir, "node_modules");
        return _fs2.default.readdir(modules).then(files => {
            let ps = files.map(n => _path2.default.join(modules, n)).map(n => [n, _fs2.default.statSync(n)]).filter(v => v[1].isDirectory()).map(v => _path2.default.join(v[0], "package.json")).map(n => [n, _fs2.default.existsSync(n)]).filter(v => v[1]).map(v => (0, _readPackageJson2.default)(v[0]));
            return Promise.all(ps).then(pkgs => {
                return new Map(pkgs.map(pkg => [pkg.name, pkg.version]));
            });
        });
    }
    return Promise.resolve(new Map());
}

function computeUpdatedDependencies(LOG, options, diff, mv, out) {
    LOG("compute shadow dependencies");
    if (options.withShadows) {
        let msgs = out.split(/[\r]?\n/);
        let tree = JSON.parse(msgs[msgs.length - 1]);

        let names = new Set(diff.map(d => d[0]));
        let shadows = tree.data.trees.map(v => v.name.split(/@/)).filter(([name, version]) => {
            let cur = mv.get(name);
            return cur ? cur !== version : true;
        }).map(([name, version]) => {
            let cur = mv.get(name);
            return [name, cur || version, version, undefined, "shadow"];
        }).filter(v => names.has(v[0]) === false);
        return diff.concat(shadows.sort((left, right) => {
            return left[0].localeCompare(right[0]);
        }));
    }
    return diff;
}

function findExistingBranch(LOG, options, names, diff, hex) {
    LOG("Find existing branch.");
    let newBranch = `${options.prefix}${options.now}/${hex}`;
    let found = names.find(n => n.endsWith(hex));
    if (found) {
        LOG(`Found existing branch ${found}`);
        return Promise.reject("Working Branch is already exists.");
    }
    return [newBranch, diff];
}

function selectPushPromise(LOG, options, git, remote, branch) {
    if (options.execute) {
        return git.push(remote, branch);
    }
    LOG("`git push` is skipped because --execute is not specified.");
    return Promise.resolve();
}

function selectDeletePromise(LOG, options, git, branch, report) {
    let p;
    if (options.keep) {
        LOG("Working branch is kept.");
        p = Promise.resolve();
    } else {
        LOG("Delete working branch because --keep is not specified.");
        p = git.deleteBranch(branch);
    }
    return p.then(() => report);
}

// for tesing purpose
const __test__ = exports.__test__ = [findOutdatedDeps, findExistingBranch, selectPushPromise, selectDeletePromise];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,